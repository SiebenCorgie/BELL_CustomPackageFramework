import cpf
import CPFConf as conf
import CPFWeb as web
import SystemInteraction as SI

#database sql
import sqlite3

def db_connect(bCustomName, name):
	
	global c
	global db

	#connect to new database if specified
	if bCustomName == True:
		dblocation = name
	else:
		dblocation = conf.get_entry('DB','currentdb')

	#Datenbank
	db = sqlite3.connect(dblocation)
		#Zeiger
	c = db.cursor()

def add_db(Name):
	global c
	db_connect(True, Name)
	c.execute('''create table CPFDB
	(id INTEGER PRIMARY KEY, 
	name text,
	description_short text, 
	description_long text, 
	screenshotloc text, 
	ubuntu_id text,
	debian_id text, 
	arch_id text, 
	symbol text, 
	maincategory text, 
	subcategory text)''')

	db.commit()
	db.close()

#Daten einf√ºgen
def db_add_entry(builder):
	global c
	global db
	db_connect(False, 'none')

	nameL = builder.get_object('DB_A_NameEdit')
	name =  nameL.get_text()

	desc_sL = builder.get_object('DB_A_DescS_Edit')
	desc_s = desc_sL.get_text()

	desc_lL = builder.get_object('DB_A_DescL_Edit')
	desc_l = desc_lL.get_text()

	#ScreenshotFile_____________________________________________________________
	#copy picture in custom FileFolder
	screenshotchooser = builder.get_object('DB_A_ScreenChooser')
	LocalScreenLocation = screenshotchooser.get_filename()
	if LocalScreenLocation == None:
		ErrorMessage()
		return
		
	LocalScreenName = LocalScreenLocation[len(screenshotchooser.get_current_folder())+1:]
	#print('Screenfilename: ' + LocalScreenName)

	#make final name
	screenshotloc = '/Screenshots/' + LocalScreenName

	#copy to local git repo
	DatabaseLocation = SI.execute('dirname ' + conf.get_entry('DB','currentdb'), True)
	#print('DatabaseLoc = ' + DatabaseLocation )
	ScreenshotLocations = DatabaseLocation + '/Screenshots/'
	#print('ScreenLocation: ' + ScreenshotLocations)
	try:
		SI.execute('cp ' + LocalScreenLocation + ' ' + ScreenshotLocations, False) 
		#print('Screen command: ' + 'cp -r ' + LocalScreenLocation + ' ' + ScreenshotLocations)
	except:
		SI.execute('cd ' + DatabaseLocation + ' && mkdir Screenshots')
		SI.execute('cp -r ' + LocalScreenLocation + ' ' + ScreenshotLocations, False) 	
	print('Copied Screenshot file')

	#SymbolFile_________________________________________________________________
	#copy to git folder
	SymbolChooser = builder.get_object('DB_A_SymbolChooser')
	LocalSymbolLocation = SymbolChooser.get_filename()
	if LocalSymbolLocation == None:
		ErrorMessage()
		return
		
	LocalSymbolName = LocalSymbolLocation[len(SymbolChooser.get_current_folder())+1:]
	#print('SymbolFilename: ' + LocalScreenName)

	#make final symbol name
	symbol = '/Symbols/' + LocalSymbolName

	#copy symbol to git repo
	try:
		SI.execute('cp -r ' + LocalSymbolLocation + ' ' + DatabaseLocation + '/Symbols/', False)
		#print('Symbol command: ' + 'cp ' + LocalSymbolLocation + ' ' + DatabaseLocation + '/Symbols/')
	except:
		SI.execute('cd ' + DatabaseLocation + ' && mkdir Symbols')
		SI.execute('cp -r ' + LocalSymbolLocation + ' ' + DatabaseLocation + '/Symbols/', False)	
	print('Copied Symbol file')
	#___________________________________________________________________________
		
	UbuntuID_L = builder.get_object('DB_A_UbuntuName')
	ubuntu_id = UbuntuID_L.get_text()

	
	DebianID_L = builder.get_object('DB_A_DebianName')
	debian_id  = DebianID_L.get_text()

	ArchID_L = builder.get_object('DB_A_ArchName')
	arch_id  = ArchID_L.get_text()

	MainCategory_L = builder.get_object('DB_A_MainCat')
	maincategory =MainCategory_L.get_text()

	SubCategory_L = builder.get_object('DB_A_SubCat')
	subcategory = SubCategory_L.get_text()


	#Check if all credentials are filled in

	if name == None or desc_s == None or desc_l == None or screenshotloc == None or ubuntu_id == None or debian_id == None or arch_id == None or symbol == None or maincategory == None or subcategory == None:
		ErrorMessage()
		return

	c.execute('''INSERT INTO CPFDB(
				name, 
				description_short, 
				description_long, 
				screenshotloc, 
				ubuntu_id, 
				debian_id, 
				arch_id, 
				symbol, 

				
				maincategory, 
				
				subcategory)
                VALUES(?,?,?,?,?,?,?,?,?,?)''', (name, desc_s, desc_l, screenshotloc, ubuntu_id, debian_id, arch_id, symbol, maincategory, subcategory))
	db.commit()
	db.close()
	print('Added DatabaseEntry')

#read entrys
def db_read():
	global c
	global db
	db_connect(False, 'none')
	for row in c.execute('SELECT * FROM CPFDB ORDER BY name'):
		print(row)

	

		